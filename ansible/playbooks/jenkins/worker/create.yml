---

#
# set up a jenkins worker -- muy bueno!
#

- hosts:
  - test
  - release
  # Benchmarking machine
  - infra-softlayer-ubuntu1404-x64-2
  - "!*-win*"

  roles:
    - bootstrap
    - package-upgrade
    - baselayout
    - { role: 'benchmarking',
        when: is_benchmark is defined and is_benchmark|bool == True }
    - jenkins-worker

  pre_tasks:
# Requires `secret: XXX` to be in the ansible/host_vars/HOST
# file, where XXX is the jenkins secret used to connect to the master,
# and HOST is the full ansible host name.
    - name: check if secret is properly set
      fail:
      failed_when: not secret
# Requires `additional_drive: /dev/dasdb1` to be in the ansible/host_vars/HOST
# file, where HOST is the full ansible host name.
    - name: check if additional_drive is properly set
      fail:
      failed_when: not additional_drive
      when: "'rhel72-s390x' in inventory_hostname"

  environment: '{{remote_env}}'

#
# Set up Jenkins Workspace servers
#

- hosts:
    - test-packetnet-ubuntu1604-x64-1
    - test-packetnet-ubuntu1604-x64-2
    - test-softlayer-ubuntu1604-x64-1

  roles:
    - jenkins-workspace

#
# Set up ARM cross compiler servers
#

- hosts:
    - test-azure_msft-ubuntu1404-x64-1
    - test-joyent-ubuntu1604_arm_cross-x64-1
    - release-joyent-ubuntu1604_arm_cross-x64-1

  roles:
    - cross-compiler

#
# Install Linux perf on Ubuntu 16.04 servers
#

- hosts:
    - test-*-ubuntu1604-x*
  roles:
    - linux-perf

# Ensure node is not installed anywhere but the linter servers
- hosts:
  - test
  - release
  - "!test-packetnet-ubuntu1604-x64-1"
  - "!test-packetnet-ubuntu1604-x64-2"
  - "!test-softlayer-ubuntu1604-x64-1"
  tasks:
    - name: remove node and npm packages
      when: not os|startswith("win") and not os|startswith("zos")
      package:
        name: "{{ package }}"
        state: absent
      loop_control:
        loop_var: package
      with_items: [ "node", "nodejs", "npm" ]
    - name: fail if node is in the path - please uninstall it
      when: not os|startswith("win")
      shell: "node -v"
      register: node_check_cmd
      failed_when: node_check_cmd.rc == 0
      changed_when: False
    - name: fail if node is in the path - please uninstall it
      when: os|startswith("win")
      win_shell: "node -v"
      register: node_check_cmd_win
      failed_when: node_check_cmd_win.rc == 0
      changed_when: False
