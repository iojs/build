- name: check existing ninja
  ansible.builtin.command: "{{ ninja_dest_dir }}/ninja --version"
  changed_when: no
  failed_when: no
  register: ninja_installed_version

- name: get Ninja release information from GitHub
  ansible.builtin.uri:
    return_content: yes
    url: https://api.github.com/repos/ninja-build/ninja/releases/latest
  register: ninja_latest

# Tag in GitHub is prefixed with 'v' but the output from `ninja --version` is not.
- name: check if Ninja needs to be rebuilt
  ansible.builtin.set_fact:
    rebuild_ninja: "{{ not ninja_installed_version.stdout|default('') == ninja_latest.json.tag_name[1:] }}"

- name: clone/update ninja-build repository
  ansible.builtin.git:
    dest: "{{ ninja_git_dir }}"
    repo: https://github.com/ninja-build/ninja
    version: "{{ ninja_latest.json.tag_name }}"
  become: "{{ ninja_user|default(omit)|bool }}"
  become_user: "{{ ninja_user|default(omit) }}"
  when: rebuild_ninja

- name: build Ninja
  ansible.builtin.shell: |
    python3 ./configure.py --bootstrap && \
    ./ninja ninja_test && ./ninja_test
  args:
    chdir: "{{ ninja_git_dir }}"
  become: "{{ ninja_user|default(omit)|bool }}"
  become_user: "{{ ninja_user|default(omit) }}"
  when: rebuild_ninja

- name: create symlink
  ansible.builtin.file:
    dest: "{{ ninja_dest_dir }}/ninja"
    src: "{{ ninja_git_dir }}/ninja"
    state: link
  become: "{{ ninja_user|default(omit)|bool }}"
  become_user: "{{ ninja_user|default(omit) }}"
  when: rebuild_ninja
 
