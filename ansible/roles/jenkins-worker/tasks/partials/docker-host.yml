---

- name: docker | register {{ server_user }} GID
  shell: "grep ^{{ server_user }} /etc/group | awk -F: '{print $3}'"
  register: server_user_gid

- name: docker | register {{ server_user }} UID
  shell: "grep ^{{ server_user }} /etc/passwd | awk -F: '{print $4}'"
  register: server_user_uid

- name: docker | fetch latest ccache release version
  uri:
    url: https://api.github.com/repos/ccache/ccache/tags
    return_content: yes
  warn: False
  register: ccache_latest_result

- name: docker | parse ccache version
  set_fact:
    ccache_latest_with_v: "{{ ccache_latest_result.content | from_json | json_query('[0].name') }}"

- name: docker | register ccache version
  set_fact:
    ccache_latest: "{{ ccache_latest_with_v.split('v')[1] }}"

- name: docker | install docker from docker.com
  raw: curl -fsSL get.docker.com | sudo bash -

- name: docker | copy docker-exec script
  template:
    src: "{{ role_path }}/templates/docker-node-exec.sh.j2"
    dest: "/usr/local/bin/docker-node-exec.sh"
    mode: 0755

- name: docker | give {{ server_user }} sudoers access to docker-exec script
  lineinfile:
    line: "{{ server_user }} ALL=(ALL) NOPASSWD: /usr/local/bin/docker-node-exec.sh"
    dest: "/etc/sudoers"
    regexp: docker-node-exec.sh$

- name: docker | make build directory
  file:
    path: /root/docker-container-{{ item.name }}
    state: directory
  with_items: "{{ docker_containers }}"

- name: docker | generate Dockerfile
  template:
    src: "{{ role_path }}/templates/{{ item.template }}"
    dest: /root/docker-container-{{ item.name }}/Dockerfile
    mode: "0644"
  with_items: "{{ docker_containers }}"

- name: docker | build image
  command: docker build -t node-ci:{{ item.name }} /root/docker-container-{{ item.name }}/
  with_items: "{{ docker_containers }}"

- name: docker | generate and copy init script
  template:
    src: "{{ role_path }}/templates/docker-jenkins.service.j2"
    dest: "/lib/systemd/system/docker-jenkins-{{ item.name }}.service"
  with_items: "{{ docker_containers }}"

- name: docker | start containers
  service:
    name: "docker-jenkins-{{ item.name }}"
    state: started
    enabled: yes
  with_items: "{{ docker_containers }}"
